/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianPluginTemplate
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ObsidianPluginTemplate = class extends import_obsidian.Plugin {
  // Called when the plugin is loaded
  onload() {
    this.statusBarElement = this.addStatusBarItem().createEl("span");
    this.readActiveFileAndUpdateLineCount();
    this.app.workspace.on("editor-change", (editor) => {
      const content = editor.getDoc().getValue();
      this.updateLineCount(content);
    });
    this.app.workspace.on("active-leaf-change", () => {
      this.readActiveFileAndUpdateLineCount();
    });
  }
  // Called when the plugin is disabled or Obsidian is closed
  onunload() {
    this.statusBarElement.remove();
  }
  // Helper method to read the current file's content and update the line count
  async readActiveFileAndUpdateLineCount() {
    const file = this.app.workspace.getActiveFile();
    if (file) {
      const content = await this.app.vault.read(file);
      this.updateLineCount(content);
    } else {
      this.updateLineCount(void 0);
    }
  }
  // Helper method to calculate and display the line count
  updateLineCount(fileContent) {
    const count = fileContent ? fileContent.split(/\r\n|\r|\n/).length : 0;
    const linesWord = count === 1 ? "line" : "lines";
    this.statusBarElement.textContent = `${count} ${linesWord}`;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gSW1wb3J0IHRoZSBQbHVnaW4gY2xhc3MgZnJvbSBPYnNpZGlhbidzIEFQSVxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbi8vIERlZmluZSBhIHBsdWdpbiBjbGFzcyB0aGF0IGV4dGVuZHMgT2JzaWRpYW4ncyBiYXNlIFBsdWdpbiBjbGFzc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JzaWRpYW5QbHVnaW5UZW1wbGF0ZSBleHRlbmRzIFBsdWdpbiB7XG4gIC8vIERlY2xhcmUgYSBwcm9wZXJ0eSB0byBzdG9yZSB0aGUgc3RhdHVzIGJhciBlbGVtZW50XG4gIHN0YXR1c0JhckVsZW1lbnQ6IEhUTUxTcGFuRWxlbWVudDtcblxuICAvLyBDYWxsZWQgd2hlbiB0aGUgcGx1Z2luIGlzIGxvYWRlZFxuICBvbmxvYWQoKSB7XG4gICAgLy8gQ3JlYXRlIGEgbmV3IHNwYW4gZWxlbWVudCBpbiBPYnNpZGlhbidzIHN0YXR1cyBiYXJcbiAgICB0aGlzLnN0YXR1c0JhckVsZW1lbnQgPSB0aGlzLmFkZFN0YXR1c0Jhckl0ZW0oKS5jcmVhdGVFbChcInNwYW5cIik7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBsaW5lIGNvdW50IGZvciB0aGUgY3VycmVudCBhY3RpdmUgZmlsZVxuICAgIHRoaXMucmVhZEFjdGl2ZUZpbGVBbmRVcGRhdGVMaW5lQ291bnQoKTtcblxuICAgIC8vIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyIGZvciB3aGVuIHRoZSBlZGl0b3IgY29udGVudCBjaGFuZ2VzXG4gICAgLy8gVGhpcyBlbnN1cmVzIHRoZSBsaW5lIGNvdW50IHVwZGF0ZXMgaW4gcmVhbC10aW1lIGFzIHRoZSB1c2VyIHR5cGVzXG4gICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKFwiZWRpdG9yLWNoYW5nZVwiLCAoZWRpdG9yKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gZWRpdG9yLmdldERvYygpLmdldFZhbHVlKCk7XG4gICAgICB0aGlzLnVwZGF0ZUxpbmVDb3VudChjb250ZW50KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyIGZvciB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJldHdlZW4gZGlmZmVyZW50IGZpbGVzXG4gICAgLy8gVGhpcyBlbnN1cmVzIHRoZSBsaW5lIGNvdW50IHVwZGF0ZXMgd2hlbiBjaGFuZ2luZyB0byBhIGRpZmZlcmVudCBmaWxlXG4gICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKFwiYWN0aXZlLWxlYWYtY2hhbmdlXCIsICgpID0+IHtcbiAgICAgIHRoaXMucmVhZEFjdGl2ZUZpbGVBbmRVcGRhdGVMaW5lQ291bnQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIENhbGxlZCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQgb3IgT2JzaWRpYW4gaXMgY2xvc2VkXG4gIG9udW5sb2FkKCkge1xuICAgIC8vIFJlbW92ZSB0aGUgc3RhdHVzIGJhciBlbGVtZW50IHRvIGNsZWFuIHVwXG4gICAgdGhpcy5zdGF0dXNCYXJFbGVtZW50LnJlbW92ZSgpO1xuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZCB0byByZWFkIHRoZSBjdXJyZW50IGZpbGUncyBjb250ZW50IGFuZCB1cGRhdGUgdGhlIGxpbmUgY291bnRcbiAgcHJpdmF0ZSBhc3luYyByZWFkQWN0aXZlRmlsZUFuZFVwZGF0ZUxpbmVDb3VudCgpIHtcbiAgICAvLyBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgZmlsZVxuICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgIGlmIChmaWxlKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBhbiBhY3RpdmUgZmlsZSwgcmVhZCBpdHMgY29udGVudFxuICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICB0aGlzLnVwZGF0ZUxpbmVDb3VudChjb250ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm8gZmlsZSBpcyBhY3RpdmUsIHNob3cgMCBsaW5lc1xuICAgICAgdGhpcy51cGRhdGVMaW5lQ291bnQodW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cblxuICAvLyBIZWxwZXIgbWV0aG9kIHRvIGNhbGN1bGF0ZSBhbmQgZGlzcGxheSB0aGUgbGluZSBjb3VudFxuICBwcml2YXRlIHVwZGF0ZUxpbmVDb3VudChmaWxlQ29udGVudD86IHN0cmluZykge1xuICAgIC8vIENhbGN1bGF0ZSB0aGUgbnVtYmVyIG9mIGxpbmVzIGJ5IHNwbGl0dGluZyBvbiBuZXdsaW5lIGNoYXJhY3RlcnNcbiAgICAvLyBJZiBubyBjb250ZW50IGlzIHByb3ZpZGVkLCBkZWZhdWx0IHRvIDAgbGluZXNcbiAgICBjb25zdCBjb3VudCA9IGZpbGVDb250ZW50ID8gZmlsZUNvbnRlbnQuc3BsaXQoL1xcclxcbnxcXHJ8XFxuLykubGVuZ3RoIDogMDtcblxuICAgIC8vIFVzZSBwcm9wZXIgc2luZ3VsYXIvcGx1cmFsIGZvcm0gb2YgXCJsaW5lXCIgYmFzZWQgb24gY291bnRcbiAgICBjb25zdCBsaW5lc1dvcmQgPSBjb3VudCA9PT0gMSA/IFwibGluZVwiIDogXCJsaW5lc1wiO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBzdGF0dXMgYmFyIHRleHQgd2l0aCB0aGUgY3VycmVudCBsaW5lIGNvdW50XG4gICAgdGhpcy5zdGF0dXNCYXJFbGVtZW50LnRleHRDb250ZW50ID0gYCR7Y291bnR9ICR7bGluZXNXb3JkfWA7XG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxzQkFBdUI7QUFHdkIsSUFBcUIseUJBQXJCLGNBQW9ELHVCQUFPO0FBQUE7QUFBQSxFQUt6RCxTQUFTO0FBRVAsU0FBSyxtQkFBbUIsS0FBSyxpQkFBaUIsRUFBRSxTQUFTLE1BQU07QUFHL0QsU0FBSyxpQ0FBaUM7QUFJdEMsU0FBSyxJQUFJLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxXQUFXO0FBQ2pELFlBQU0sVUFBVSxPQUFPLE9BQU8sRUFBRSxTQUFTO0FBQ3pDLFdBQUssZ0JBQWdCLE9BQU87QUFBQSxJQUM5QixDQUFDO0FBSUQsU0FBSyxJQUFJLFVBQVUsR0FBRyxzQkFBc0IsTUFBTTtBQUNoRCxXQUFLLGlDQUFpQztBQUFBLElBQ3hDLENBQUM7QUFBQSxFQUNIO0FBQUE7QUFBQSxFQUdBLFdBQVc7QUFFVCxTQUFLLGlCQUFpQixPQUFPO0FBQUEsRUFDL0I7QUFBQTtBQUFBLEVBR0EsTUFBYyxtQ0FBbUM7QUFFL0MsVUFBTSxPQUFPLEtBQUssSUFBSSxVQUFVLGNBQWM7QUFDOUMsUUFBSSxNQUFNO0FBRVIsWUFBTSxVQUFVLE1BQU0sS0FBSyxJQUFJLE1BQU0sS0FBSyxJQUFJO0FBQzlDLFdBQUssZ0JBQWdCLE9BQU87QUFBQSxJQUM5QixPQUFPO0FBRUwsV0FBSyxnQkFBZ0IsTUFBUztBQUFBLElBQ2hDO0FBQUEsRUFDRjtBQUFBO0FBQUEsRUFHUSxnQkFBZ0IsYUFBc0I7QUFHNUMsVUFBTSxRQUFRLGNBQWMsWUFBWSxNQUFNLFlBQVksRUFBRSxTQUFTO0FBR3JFLFVBQU0sWUFBWSxVQUFVLElBQUksU0FBUztBQUd6QyxTQUFLLGlCQUFpQixjQUFjLEdBQUcsU0FBUztBQUFBLEVBQ2xEO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==
